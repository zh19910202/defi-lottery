{
	"compiler": {
		"version": "0.8.30+commit.73712a01"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "timestamp",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "roundId",
						"type": "uint256"
					}
				],
				"name": "Deposited",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "timestamp",
						"type": "uint256"
					}
				],
				"name": "FeeDeposited",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousLottery",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newLottery",
						"type": "address"
					}
				],
				"name": "LotterySet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "roundId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "timestamp",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "drawTimestamp",
						"type": "uint256"
					}
				],
				"name": "NewRoundStarted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousPrizePool",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newPrizePool",
						"type": "address"
					}
				],
				"name": "PrizePoolSet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "timestamp",
						"type": "uint256"
					}
				],
				"name": "ShareTokenBurned",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "timestamp",
						"type": "uint256"
					}
				],
				"name": "ShareTokenMinted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousShareToken",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newShareToken",
						"type": "address"
					}
				],
				"name": "ShareTokenSet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "roundId",
						"type": "uint256"
					}
				],
				"name": "ShortfallCovered",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "timestamp",
						"type": "uint256"
					}
				],
				"name": "WETHDeposited",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousWETH",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newWETH",
						"type": "address"
					}
				],
				"name": "WETHSet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "timestamp",
						"type": "uint256"
					}
				],
				"name": "WETHWithdrawn",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "timestamp",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "roundId",
						"type": "uint256"
					}
				],
				"name": "Withdrawn",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "oldYieldAggregator",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newYieldAggregator",
						"type": "address"
					}
				],
				"name": "YieldAggregatorSet",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "MAX_DEPOSIT",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "MIN_DEPOSIT",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "deposit",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "depositFeeToYieldAggregator",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "depositFor",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getAllDepositsTotal",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getCurrentRoundId",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getDepositTotal",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "roundId",
						"type": "uint256"
					}
				],
				"name": "getDepositTotal",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getShareToken",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getTotalWeight",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "roundId",
						"type": "uint256"
					}
				],
				"name": "getTotalWeight",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "getUser",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "roundId",
						"type": "uint256"
					}
				],
				"name": "getUser",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getUserCount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "roundId",
						"type": "uint256"
					}
				],
				"name": "getUserCount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "lottery",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "prizePool",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_lottery",
						"type": "address"
					}
				],
				"name": "setLottery",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_prizePool",
						"type": "address"
					}
				],
				"name": "setPrizePool",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_shareToken",
						"type": "address"
					}
				],
				"name": "setShareToken",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_weth",
						"type": "address"
					}
				],
				"name": "setWETH",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_yieldAggregator",
						"type": "address"
					}
				],
				"name": "setYieldAggregator",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "shareToken",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "newRoundId",
						"type": "uint256"
					}
				],
				"name": "startNewRound",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "roundId",
						"type": "uint256"
					}
				],
				"name": "userDeposits",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint128",
								"name": "amount",
								"type": "uint128"
							},
							{
								"internalType": "uint32",
								"name": "timestamp",
								"type": "uint32"
							},
							{
								"internalType": "uint96",
								"name": "weight",
								"type": "uint96"
							}
						],
						"internalType": "struct IVault.Deposit",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					}
				],
				"name": "userDeposits",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint128",
								"name": "amount",
								"type": "uint128"
							},
							{
								"internalType": "uint32",
								"name": "timestamp",
								"type": "uint32"
							},
							{
								"internalType": "uint96",
								"name": "weight",
								"type": "uint96"
							}
						],
						"internalType": "struct IVault.Deposit",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "weth",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "roundId",
						"type": "uint256"
					}
				],
				"name": "withdraw",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "withdraw",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "roundId",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "withdrawFor",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "yieldAggregator",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"details": "Implements reentrancy protection and accepts ETH deposits",
			"events": {
				"Deposited(address,uint256,uint256,uint256)": {
					"params": {
						"amount": "The amount deposited",
						"roundId": "The ID of the lottery round",
						"timestamp": "The time of the deposit",
						"user": "The address of the user who made the deposit"
					}
				},
				"FeeDeposited(uint256,uint256)": {
					"params": {
						"amount": "The amount of the fee deposited",
						"timestamp": "The time of the deposit"
					}
				},
				"LotterySet(address,address)": {
					"params": {
						"newLottery": "The new lottery address",
						"previousLottery": "The previous lottery address"
					}
				},
				"NewRoundStarted(uint256,uint256,uint256)": {
					"params": {
						"drawTimestamp": "The expected timestamp for the draw",
						"roundId": "The ID of the new round",
						"timestamp": "The timestamp when the round was started"
					}
				},
				"PrizePoolSet(address,address)": {
					"params": {
						"newPrizePool": "The new prize pool address",
						"previousPrizePool": "The previous prize pool address"
					}
				},
				"ShareTokenBurned(uint256,uint256)": {
					"params": {
						"amount": "The amount of tokens burned",
						"timestamp": "The timestamp when the tokens were burned"
					}
				},
				"ShareTokenMinted(address,uint256,uint256)": {
					"params": {
						"amount": "The amount of tokens minted",
						"timestamp": "The timestamp when the tokens were minted",
						"user": "The address of the user who received the minted tokens"
					}
				},
				"ShareTokenSet(address,address)": {
					"params": {
						"newShareToken": "The new share token address",
						"previousShareToken": "The previous share token address"
					}
				},
				"ShortfallCovered(address,uint256,uint256)": {
					"params": {
						"amount": "The amount of the shortfall that was covered",
						"roundId": "The ID of the lottery round",
						"user": "The address of the user who triggered the shortfall"
					}
				},
				"WETHSet(address,address)": {
					"params": {
						"newWETH": "The new WETH address",
						"previousWETH": "The previous WETH address"
					}
				},
				"Withdrawn(address,uint256,uint256,uint256)": {
					"params": {
						"amount": "The amount withdrawn",
						"roundId": "The ID of the lottery round",
						"timestamp": "The time of the withdrawal",
						"user": "The address of the user who made the withdrawal"
					}
				},
				"YieldAggregatorSet(address,address)": {
					"params": {
						"newYieldAggregator": "The address of the new yield aggregator",
						"oldYieldAggregator": "The address of the old yield aggregator"
					}
				}
			},
			"kind": "dev",
			"methods": {
				"deposit(uint256)": {
					"params": {
						"amount": "WETH代币数量"
					}
				},
				"depositFeeToYieldAggregator(uint256)": {
					"details": "只能由奖池合约调用，发送者必须预先批准本合约使用其WETH",
					"params": {
						"amount": "费用金额"
					},
					"returns": {
						"_0": "操作是否成功"
					}
				},
				"depositFor(address,uint256)": {
					"details": "不再限制只能由路由合约调用",
					"params": {
						"amount": "WETH代币数量",
						"user": "实际用户地址"
					}
				},
				"getAllDepositsTotal()": {
					"returns": {
						"_0": "The total amount of ETH in the vault across all rounds"
					}
				},
				"getCurrentRoundId()": {
					"returns": {
						"_0": "The ID of the current active lottery round"
					}
				},
				"getDepositTotal()": {
					"returns": {
						"_0": "The total amount of ETH in the vault for the current round"
					}
				},
				"getDepositTotal(uint256)": {
					"params": {
						"roundId": "The ID of the lottery round"
					},
					"returns": {
						"_0": "The total amount of ETH in the vault for the specified round"
					}
				},
				"getShareToken()": {
					"returns": {
						"_0": "权益代币地址"
					}
				},
				"getTotalWeight()": {
					"returns": {
						"_0": "The sum of all users' weights in the current lottery round"
					}
				},
				"getTotalWeight(uint256)": {
					"params": {
						"roundId": "The ID of the lottery round"
					},
					"returns": {
						"_0": "The sum of all users' weights in the specified lottery round"
					}
				},
				"getUser(uint256)": {
					"params": {
						"index": "The index of the user in the participants array"
					},
					"returns": {
						"_0": "The address of the user"
					}
				},
				"getUser(uint256,uint256)": {
					"params": {
						"index": "The index of the user in the participants array",
						"roundId": "The ID of the lottery round"
					},
					"returns": {
						"_0": "The address of the user"
					}
				},
				"getUserCount()": {
					"returns": {
						"_0": "The number of users in the current lottery round"
					}
				},
				"getUserCount(uint256)": {
					"params": {
						"roundId": "The ID of the lottery round"
					},
					"returns": {
						"_0": "The number of users in the specified lottery round"
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
				},
				"setLottery(address)": {
					"params": {
						"_lottery": "The address of the lottery contract"
					}
				},
				"setPrizePool(address)": {
					"params": {
						"_prizePool": "奖池合约地址"
					}
				},
				"setShareToken(address)": {
					"params": {
						"_shareToken": "权益代币地址"
					}
				},
				"setWETH(address)": {
					"params": {
						"_weth": "WETH代币地址"
					}
				},
				"setYieldAggregator(address)": {
					"params": {
						"_yieldAggregator": "The address of the yield aggregator"
					}
				},
				"startNewRound(uint256)": {
					"details": "只能由彩票合约调用",
					"params": {
						"newRoundId": "新轮次的ID"
					}
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				},
				"userDeposits(address)": {
					"params": {
						"user": "用户地址"
					},
					"returns": {
						"_0": "用户在当前轮次的存款信息"
					}
				},
				"userDeposits(address,uint256)": {
					"params": {
						"roundId": "轮次ID",
						"user": "用户地址"
					},
					"returns": {
						"_0": "用户在该轮次的存款信息"
					}
				},
				"weth()": {
					"returns": {
						"_0": "The address of the WETH token"
					}
				},
				"withdraw()": {
					"details": "Will withdraw the full amount of user's deposit and reset their weight to zero"
				},
				"withdraw(uint256)": {
					"details": "Will withdraw the full amount of user's deposit and reset their weight to zero",
					"params": {
						"roundId": "The ID of the lottery round"
					}
				}
			},
			"title": "Vault Contract",
			"version": 1
		},
		"userdoc": {
			"events": {
				"Deposited(address,uint256,uint256,uint256)": {
					"notice": "Emitted when a user makes a deposit"
				},
				"FeeDeposited(uint256,uint256)": {
					"notice": "Emitted when a fee is deposited to the yield aggregator"
				},
				"LotterySet(address,address)": {
					"notice": "Emitted when lottery contract address is updated"
				},
				"NewRoundStarted(uint256,uint256,uint256)": {
					"notice": "Emitted when a new round is started"
				},
				"PrizePoolSet(address,address)": {
					"notice": "Emitted when prize pool contract address is updated"
				},
				"ShareTokenBurned(uint256,uint256)": {
					"notice": "Emitted when share tokens are burned"
				},
				"ShareTokenMinted(address,uint256,uint256)": {
					"notice": "Emitted when share tokens are minted"
				},
				"ShareTokenSet(address,address)": {
					"notice": "Emitted when share token address is updated"
				},
				"ShortfallCovered(address,uint256,uint256)": {
					"notice": "Emitted when a shortfall is covered by withdrawing from yield aggregator"
				},
				"WETHSet(address,address)": {
					"notice": "Emitted when WETH token address is updated"
				},
				"Withdrawn(address,uint256,uint256,uint256)": {
					"notice": "Emitted when a user withdraws their deposit"
				},
				"YieldAggregatorSet(address,address)": {
					"notice": "Emitted when yield aggregator is set"
				}
			},
			"kind": "user",
			"methods": {
				"deposit(uint256)": {
					"notice": "Deposit between 0.1 and 1 ETH worth of WETH tokens to enter the lottery"
				},
				"depositFeeToYieldAggregator(uint256)": {
					"notice": "将WETH代币费用存入收益聚合器（从代币中直接提取）"
				},
				"depositFor(address,uint256)": {
					"notice": "允许任何地址代表用户进行WETH代币存款"
				},
				"getAllDepositsTotal()": {
					"notice": "Returns the total amount of ETH deposited across all rounds"
				},
				"getCurrentRoundId()": {
					"notice": "Returns the current active round ID"
				},
				"getDepositTotal()": {
					"notice": "Returns the total amount of ETH deposited in the current round"
				},
				"getDepositTotal(uint256)": {
					"notice": "Returns the total amount of ETH deposited in a specific round"
				},
				"getShareToken()": {
					"notice": "返回权益代币地址"
				},
				"getTotalWeight()": {
					"notice": "Returns the total weight of all participants in the current round"
				},
				"getTotalWeight(uint256)": {
					"notice": "Returns the total weight of all participants in a specific round"
				},
				"getUser(uint256)": {
					"notice": "Returns the user address at the given index in the current round"
				},
				"getUser(uint256,uint256)": {
					"notice": "Returns the user address at the given index in a specific round"
				},
				"getUserCount()": {
					"notice": "Returns the total number of participants in the current round"
				},
				"getUserCount(uint256)": {
					"notice": "Returns the total number of participants in a specific round"
				},
				"setLottery(address)": {
					"notice": "Sets the lottery contract address"
				},
				"setPrizePool(address)": {
					"notice": "设置奖池合约地址"
				},
				"setShareToken(address)": {
					"notice": "设置权益代币地址"
				},
				"setWETH(address)": {
					"notice": "设置WETH代币地址"
				},
				"setYieldAggregator(address)": {
					"notice": "Sets the yield aggregator address"
				},
				"startNewRound(uint256)": {
					"notice": "开始新的一轮彩票"
				},
				"userDeposits(address)": {
					"notice": "获取用户在当前轮次的存款信息"
				},
				"userDeposits(address,uint256)": {
					"notice": "获取用户在特定轮次的存款信息"
				},
				"weth()": {
					"notice": "Returns the WETH token address"
				},
				"withdraw()": {
					"notice": "Allows users to withdraw all their deposited ETH from the current round"
				},
				"withdraw(uint256)": {
					"notice": "Allows users to withdraw all their deposited ETH from a specific round"
				}
			},
			"notice": "Manages user deposits and withdrawals in the lottery system",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/Vault.sol": "Vault"
		},
		"evmVersion": "prague",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9",
			"license": "MIT",
			"urls": [
				"bzz-raw://e12cbaa7378fd9b62280e4e1d164bedcb4399ce238f5f98fc0eefb7e50577981",
				"dweb:/ipfs/QmXRoFGUgfsaRkoPT5bxNMtSayKTQ8GZATLPXf69HcRA51"
			]
		},
		"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
			"keccak256": "0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935",
			"license": "MIT",
			"urls": [
				"bzz-raw://287a2f8d5814dd0f05f22b740f18ca8321acc21c9bd03a6cb2203ea626e2f3f2",
				"dweb:/ipfs/QmZRQv9iuwU817VuqkA2WweiaibKii69x9QxYBBEfbNEud"
			]
		},
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2",
			"license": "MIT",
			"urls": [
				"bzz-raw://87a7a5d2f6f63f84598af02b8c50ca2df2631cb8ba2453e8d95fcb17e4be9824",
				"dweb:/ipfs/QmR76hqtAcRqoFj33tmNjcWTLrgNsAaakYwnKZ8zoJtKei"
			]
		},
		"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
			"keccak256": "0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5",
			"license": "MIT",
			"urls": [
				"bzz-raw://4632c341a06ba5c079b51ca5a915efab4e6ab57735b37839b3e8365ff806a43e",
				"dweb:/ipfs/QmTHT3xHYed2wajEoA5qu7ii2BxLpPhQZHwAhtLK5Z7ANK"
			]
		},
		"@openzeppelin/contracts/utils/Address.sol": {
			"keccak256": "0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87",
			"license": "MIT",
			"urls": [
				"bzz-raw://b3a57d0854b2fdce6ebff933a48dca2445643d1eccfc27f00292e937f26c6a58",
				"dweb:/ipfs/QmW45rZooS9TqR4YXUbjRbtf2Bpb5ouSarBvfW1LdGprvV"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
			"license": "MIT",
			"urls": [
				"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
				"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
			]
		},
		"@prb/math/src/Common.sol": {
			"keccak256": "0x8225a3898d2f11f585da1fb82234800e9717fa080dbe53d450fd429a3a632e99",
			"license": "MIT",
			"urls": [
				"bzz-raw://2dcbf39ca575f68f32f0d1c66391de94082424956e7585e849813966f8c0fc05",
				"dweb:/ipfs/QmYvk8vXFDUJHrmqbtutYXfoLomLBosYLyBzuPoYBxsQ42"
			]
		},
		"@prb/math/src/UD60x18.sol": {
			"keccak256": "0xb98c6f74275914d279e8af6c502c2b1f50d5f6e1ed418d3b0153f5a193206c48",
			"license": "MIT",
			"urls": [
				"bzz-raw://a750edde2955f160806a51083a12185fb04e20efca0e3a7ebd127dc1acc049a9",
				"dweb:/ipfs/QmeAre3mThopoQPB9mSXZq6jck59QZ7JbDFR83urd2SLvp"
			]
		},
		"@prb/math/src/sd1x18/Casting.sol": {
			"keccak256": "0x5d365f655f01598926c5d4fe5cda277f2cc7736fe38f943c11a32009077ddd5c",
			"license": "MIT",
			"urls": [
				"bzz-raw://56b378bd6039819bc12e5f17dabd9492e1410b3281f9df496cf8210539101a11",
				"dweb:/ipfs/QmcMaE64ZWMg9cFhYxdTuG8nfzeDdNuTRHMMoFXi6tSZGu"
			]
		},
		"@prb/math/src/sd1x18/Constants.sol": {
			"keccak256": "0xc14cc32061863d83912f9616de86f3c34f1ac58614b7d504c6ce07ee8efdb8e8",
			"license": "MIT",
			"urls": [
				"bzz-raw://22483b1282dda6a556b0232f008a5a3296bbfd76b1886e6b72bf351b7c554fab",
				"dweb:/ipfs/QmYX9cYkrFxBbhZNKsb6uUxtrc2chmAj7vuc7UKRPGMwos"
			]
		},
		"@prb/math/src/sd1x18/Errors.sol": {
			"keccak256": "0xc3c8b1ab3d19889c356c222a3a2186d45dfc1d3a17b9ad88159bb64ee457baa6",
			"license": "MIT",
			"urls": [
				"bzz-raw://84fbe57569246403f778330bd7723018dfcb5f0ec50d7b1d82cc983c94a54bca",
				"dweb:/ipfs/QmWssAAnovc2EVjt58rTnxraE9B1RMivwTvYCYgpnr6oSE"
			]
		},
		"@prb/math/src/sd1x18/ValueType.sol": {
			"keccak256": "0xaa9dc7b562faf45264390d80e2ea10c5295bb8a4f10d76261a3f9c04363734c0",
			"license": "MIT",
			"urls": [
				"bzz-raw://c6ca36acd15f5cb47cf124ddec289f84e1011f2d29056159e4570435629a3353",
				"dweb:/ipfs/QmUKdiLmZpAkNCq2TKxrPbQPUhiRFXGfjGSnY1VeHVu4y6"
			]
		},
		"@prb/math/src/sd21x18/Casting.sol": {
			"keccak256": "0x4a16adddb9ab1f6939dd4567c77205015a11081cb840029b84bbb6fdaf78ee36",
			"license": "MIT",
			"urls": [
				"bzz-raw://5003b2f4cd2fc1413da36bc63107c6e83a88d29693e8f97b54f300fa78f9c6d2",
				"dweb:/ipfs/QmaNJn91NLrZmeeGqnFQV1FTrLVSW852zHyWTrWJ5pf1pd"
			]
		},
		"@prb/math/src/sd21x18/Constants.sol": {
			"keccak256": "0x501c2d5cfdea9450422182059c8df1cb6a859901a07bd59631c3fa24edcc79d4",
			"license": "MIT",
			"urls": [
				"bzz-raw://4669a65001c92919671fd879d33ce0e5030b602a7ba4d36bd2308128d8d1f396",
				"dweb:/ipfs/QmUC3bJ3qdkCmLMw3WHBcEqvuC4tExT2LXzUhgu5KQ3vi3"
			]
		},
		"@prb/math/src/sd21x18/Errors.sol": {
			"keccak256": "0xc5422ee47eb139274e538e758fb40177a1ba22c2113ef3b3446102f0150bfe0a",
			"license": "MIT",
			"urls": [
				"bzz-raw://a1981e052e9e86e1b0e4e55a057a7af4739aedd4ead2d60e3eaa40fb703594ee",
				"dweb:/ipfs/QmPK5qSujnyk1R8ues4RhDMy1tRKKyjQ31YJTviTKq7GML"
			]
		},
		"@prb/math/src/sd21x18/ValueType.sol": {
			"keccak256": "0x532bba888370bed393464412f4ef3462d654802e71c953ad02d078e3d2701092",
			"license": "MIT",
			"urls": [
				"bzz-raw://922a4e8dd813602f72d165aa1dfdf2c29b971a2abe73bebca7cd81a32ee2c880",
				"dweb:/ipfs/QmTBAJnx1r3sZpbQAuTgQtsTtvjZbpDwhCJRzkhzUumbdf"
			]
		},
		"@prb/math/src/sd59x18/Casting.sol": {
			"keccak256": "0xdf70d8e70c6d6325f3f7eb028c484bc7189ef902f1d4b5b220af2e550bb5fc39",
			"license": "MIT",
			"urls": [
				"bzz-raw://0b15bcd36129c5cb163d57a117435afb171182018dd6d1e766a5f49cf1f4b63d",
				"dweb:/ipfs/QmbjzkMBH4FM2rdxGbx9LQ65wVERijNcu7R9C8dQmH3y4n"
			]
		},
		"@prb/math/src/sd59x18/Constants.sol": {
			"keccak256": "0x9bcb8dd6b3e886d140ad1c32747a4f6d29a492529ceb835be878ae837aa6cc3a",
			"license": "MIT",
			"urls": [
				"bzz-raw://c4045c633e3618e7e90a768d92415b2f20f781fe129b4f4e26fa88f7dbf9201f",
				"dweb:/ipfs/Qmbet95pizwPno82cJ383wJtgQRSQKESmhVZ1vDrgAu7Si"
			]
		},
		"@prb/math/src/sd59x18/Errors.sol": {
			"keccak256": "0x0a79c28c85fc8a450b0801ff2e66114eac4ec565819f5d1d8738904658fe33e2",
			"license": "MIT",
			"urls": [
				"bzz-raw://9e0d4fd3c998019fb8555d9e26c03bec42a8513bdf4185aeac2da3a000abaebf",
				"dweb:/ipfs/QmahFJHXcX4RwPxaQbUf6LVZEk8NSpjCV3Eif7i9iqC6Mk"
			]
		},
		"@prb/math/src/sd59x18/Helpers.sol": {
			"keccak256": "0x208570f1657cf730cb6c3d81aa14030e0d45cf906cdedea5059369d7df4bb716",
			"license": "MIT",
			"urls": [
				"bzz-raw://4c78ca900edafa9338d4e3649a55ab0c84f76468d8a22fb945ba6d01e70f8fed",
				"dweb:/ipfs/QmeP4hQYfNxcATd1FsasdD4ebyu2vrC9K1N68swxUJzzZD"
			]
		},
		"@prb/math/src/sd59x18/Math.sol": {
			"keccak256": "0xd8e8b51db9b3e2fa31a60f6b8ce4ea0112c3364442ede5992aa0aa7a2c925c84",
			"license": "MIT",
			"urls": [
				"bzz-raw://3c56913970e34ee7b142047b21f1856a511cbdc3473b7c50418a8490e19cd462",
				"dweb:/ipfs/QmfG1F9CBDjPYD7NXora9awFfdpvBMY9SCg5pMLCFRv9tD"
			]
		},
		"@prb/math/src/sd59x18/ValueType.sol": {
			"keccak256": "0x76597ba64d37d66e0178512bc9bbc1a031a7634c45e5d5c6e9da87f46952dc9d",
			"license": "MIT",
			"urls": [
				"bzz-raw://36148899ad874814e9292636fb974d2eec61f1bcc0875ec39cf444d70ba40919",
				"dweb:/ipfs/QmadUe4kH2FPcdxvhCKy8yiezCvPWor4VcPzqLYSAaGDDb"
			]
		},
		"@prb/math/src/ud21x18/Casting.sol": {
			"keccak256": "0x3821aa57604f6e5b7c9c5c5cc97a6d71116e673cf3fee5f76fcd42b4cefded65",
			"license": "MIT",
			"urls": [
				"bzz-raw://a80399c6b38ab45cc10d0a6683d50340cd89d9a085b6d0dcfb81e7c4e5b3ce09",
				"dweb:/ipfs/QmWNW2YD2LMkqrpAtJYeeuHN329Rx7mvfmrjsCo1p6akTL"
			]
		},
		"@prb/math/src/ud21x18/Constants.sol": {
			"keccak256": "0x0997574a1ced6c43bde6d9c9175edc5ad64cbb920a0969a9db68eea543747601",
			"license": "MIT",
			"urls": [
				"bzz-raw://c09f03345a6779b002b38ffc3954258accbb2b1d0d5506d42c3bd7f117304f60",
				"dweb:/ipfs/QmTeBXRCE7H2HpqKUNsZN7Nk3rdBnFmbAUFom3E1PJeGuV"
			]
		},
		"@prb/math/src/ud21x18/Errors.sol": {
			"keccak256": "0x35a1fb789b90f8c90865884d3023deb17fcca5c7146b5ddef823496d835a5415",
			"license": "MIT",
			"urls": [
				"bzz-raw://0af359d07ba25bdc90de7c05ed6216833932caa75d4a02fcfc51ceeaba5a4e80",
				"dweb:/ipfs/QmavBFw73Xfp1qJiN6P1gk2Dfr8ByWo3dyCPVgDHtko2gq"
			]
		},
		"@prb/math/src/ud21x18/ValueType.sol": {
			"keccak256": "0x24838b2b1da371b9259d8ee21534a9f0cb5796aba75a4efca2374627952bee25",
			"license": "MIT",
			"urls": [
				"bzz-raw://897e6b79308651671c7f3c91a0069e778b47356c9ba3f86e238398ab7f2623af",
				"dweb:/ipfs/QmZbLw3tJVRZFQnV9jWQUmF43gna841adSG2TAiwDAifGU"
			]
		},
		"@prb/math/src/ud2x18/Casting.sol": {
			"keccak256": "0x0f3141ed054e7c29dbe1acb4b88b18eb05d60e998fba6b4e503a6799faa356d6",
			"license": "MIT",
			"urls": [
				"bzz-raw://b1e2468fc4c458082aaf4aa2e35af9ba3702f207e3c8533dd1e7da11ad605eae",
				"dweb:/ipfs/QmSm7iRH1eo4cJCwcAiiXWRH9Hn1urSS4tMdbaFbFGuTyL"
			]
		},
		"@prb/math/src/ud2x18/Constants.sol": {
			"keccak256": "0x29b0e050c865899e1fb9022b460a7829cdee248c44c4299f068ba80695eec3fc",
			"license": "MIT",
			"urls": [
				"bzz-raw://cbaef16b662fac235349bcf97bc980dd0cba15d4e6230caae61224cdac8ea6d9",
				"dweb:/ipfs/QmZQa5XBhi7k3yhtCd8wVpnwW8htfU4sjXxWhxRypMBYkC"
			]
		},
		"@prb/math/src/ud2x18/Errors.sol": {
			"keccak256": "0x3b27e2a57438cd30d9c130f84aace24d547e5ed58e8689691d7d92ad2db38ddd",
			"license": "MIT",
			"urls": [
				"bzz-raw://841cf9fb45443899c6b659300bbf503c3fd2c1a1e83b7f0e28620eed457f7437",
				"dweb:/ipfs/QmUqg8WscP5yQPw3UMUCWaB9RLU6nryGzseuyhAjNnDc1i"
			]
		},
		"@prb/math/src/ud2x18/ValueType.sol": {
			"keccak256": "0x975a2e69b48f34a4c0bd80e8a5609ac67b7264c91992c0944f9ebe7b9e3fc9d0",
			"license": "MIT",
			"urls": [
				"bzz-raw://65d012521c475295d7e70b7d526fcc0911d0f238ea938719d77251bba00c9b41",
				"dweb:/ipfs/QmexEvTQCCBPYRWAYnomZX5M7C2EkXQRAXqEYMNUZfazCs"
			]
		},
		"@prb/math/src/ud60x18/Casting.sol": {
			"keccak256": "0x0803318ddc98b4ba8fbfe70e5ee08d78387fe6ae00982b9960518085a751d7b6",
			"license": "MIT",
			"urls": [
				"bzz-raw://2e68a2f780b2e33fa5416eb60f9daa81f014c2591119f4b67bed1217d5530780",
				"dweb:/ipfs/QmZe7JTWvbfKqMnu4sxUwWCtLcCay9hH71VZUpoFCdENcr"
			]
		},
		"@prb/math/src/ud60x18/Constants.sol": {
			"keccak256": "0x2b80d26153d3fdcfb3a9ca772d9309d31ed1275f5b8b54c3ffb54d3652b37d90",
			"license": "MIT",
			"urls": [
				"bzz-raw://7e3a6673a156f635db94dc176baaa7274db8f9bec4461cd1152596253550ee3b",
				"dweb:/ipfs/Qmc9zT4kNSbMYaXcnbxNVqmb3P3m46ieaQxkwxqLwsvRA5"
			]
		},
		"@prb/math/src/ud60x18/Conversions.sol": {
			"keccak256": "0xd486ecca97abe69acdb28230088f4c7097fbdae5b36c5ae45d5be2faac4c33f2",
			"license": "MIT",
			"urls": [
				"bzz-raw://6080870ec6955ff0f5278f9c480b218a68714daf5f2ee42da0276d08d7b82932",
				"dweb:/ipfs/QmQ1SERHdemJgPrt4USwY8j5r63jZ8fQuJAm1knjMEEQEY"
			]
		},
		"@prb/math/src/ud60x18/Errors.sol": {
			"keccak256": "0xbab6b0e303d32f3a9d9e2fe881f0392b8c59a73051a4d34f21a403b3961b3044",
			"license": "MIT",
			"urls": [
				"bzz-raw://86a019bcf2510d0691287329dc057479cc0abc48a5e15f245e7f15c03052d2c8",
				"dweb:/ipfs/QmeXe5pbpDHvN5DZ8puXmH2RJ25zDHj55wpiStWtNQPvq6"
			]
		},
		"@prb/math/src/ud60x18/Helpers.sol": {
			"keccak256": "0xf5faff881391d2c060029499a666cc5f0bea90a213150bb476fae8f02a5df268",
			"license": "MIT",
			"urls": [
				"bzz-raw://76105fa22bb1b5f1fa99abf9c4fbc9577a02c7bc204f271754c407f0d75489f5",
				"dweb:/ipfs/QmVNGZSTniDuZus5DdbFubqJXCLtTaZit7YPm4ntjr5Lgr"
			]
		},
		"@prb/math/src/ud60x18/Math.sol": {
			"keccak256": "0xc4e51dfd9af62938e277e90fa724099f239d33727a35909ed48c292a76faf2fc",
			"license": "MIT",
			"urls": [
				"bzz-raw://d731537cbc50b852c21d28625aeb2c329729afc23a7b86ff9d8ee5878f47e9d6",
				"dweb:/ipfs/QmS7Cj4pAdPZcTp7RqYXyxBc9EYX92CT8icfkNigktUsLr"
			]
		},
		"@prb/math/src/ud60x18/ValueType.sol": {
			"keccak256": "0x1b200baf25d01a8b91b97b42114248636f742b5b7028487ef4daef6621e378a3",
			"license": "MIT",
			"urls": [
				"bzz-raw://b5708ed017206bda2197654e80bea9f37b3a9993434bb066c903c2865e028f47",
				"dweb:/ipfs/QmTyotZk2J5YvWkNvB2qhXBMgRGWW2UgPqR4JPocrXSr8n"
			]
		},
		"contracts/Vault.sol": {
			"keccak256": "0x83780065469e7975ed4e37619701da42b207fb1c606040a5aa2d4a1692d66873",
			"license": "MIT",
			"urls": [
				"bzz-raw://473e43b71d3d5d8fa8cba72d057abe8fcab70a4e861b6ad4d36a22a9ae15fcbb",
				"dweb:/ipfs/QmaS2WBnjd9Wbijy2qjHqqvEqmevtmxTfeV8QrEEYEB9N9"
			]
		},
		"contracts/interfaces/ILottery.sol": {
			"keccak256": "0x472536440a9121d6ea03132361c787e021e6eb4bebda6bc0b051534821a99dcf",
			"license": "MIT",
			"urls": [
				"bzz-raw://2f8287719f077c760957ff8b5bc90ed2eee0a9adbcafc440f5f8eedb172caf40",
				"dweb:/ipfs/QmZ5qFPeQFEMZJ7gabcBzDqpiZrufE5fTPGeaCH9wCouGH"
			]
		},
		"contracts/interfaces/IVault.sol": {
			"keccak256": "0x4f529f144c5be29d409ec6de748f5df74b7c298511c987301c81268f8275ffe0",
			"license": "MIT",
			"urls": [
				"bzz-raw://102d405aac1364192e039f1c82fc056e9c8ac21cbced24c6cf9be238151ce627",
				"dweb:/ipfs/QmY2MjsWEmaRmSvYATyGBQ7USVzhN25FRa4pqm4VBpHTaU"
			]
		},
		"contracts/interfaces/IVaultShareToken.sol": {
			"keccak256": "0xd15d68b83574ee7cdcd595ca5a44486b50e2b09abb496bbf155eba14218101e9",
			"license": "MIT",
			"urls": [
				"bzz-raw://48e43cf7b53d6d37e46e40f431ad356c080e4263205e7bb01feb6324e47b3e70",
				"dweb:/ipfs/QmcKvQiBM8oCmTXekaxfmBfKtFEcRvenpDFnMVSTpGZiLr"
			]
		},
		"contracts/interfaces/IWETH.sol": {
			"keccak256": "0x27f8848e8946463ad1cdee596a84dbe5d68de7582934891e0ca704f0b835285e",
			"license": "MIT",
			"urls": [
				"bzz-raw://7c3b3d8432df18a1800afe57a8ebc3fb6049ae657586ef440d29e287180932b3",
				"dweb:/ipfs/QmPJS2Ep1AnfXGnnGvHvp8mHPzRzwz1szPsPNm1kUfHQrS"
			]
		},
		"contracts/interfaces/IYieldAggregator.sol": {
			"keccak256": "0x928a5d35122cd0f5c338ee83acb5fa5eb586562fc45600a00d8a26e7dd4209a7",
			"license": "MIT",
			"urls": [
				"bzz-raw://48369795a6ec305ebb8923f6e5eaa4c74f45f934f13f64e6fbd40f18198d66ec",
				"dweb:/ipfs/QmZqHmxCgrxmH2hHrfVN8yujXxp4MrNnXyUuiqNsiMiK5t"
			]
		},
		"contracts/lib/LuckyValueCalculator.sol": {
			"keccak256": "0xbe856b6d35fe1ff000d54dbaf220f0eec26e32367b3409702a4d28b24e7d419e",
			"license": "MIT",
			"urls": [
				"bzz-raw://4d93f93538c7a8356183d895fff8375bbdc4d0c8bfdd77cd084410c3c57dd1fc",
				"dweb:/ipfs/QmP6U7a5619JGWUw2pV5u53YP1EdPVGhhHfvzSfKCjNHMU"
			]
		}
	},
	"version": 1
}